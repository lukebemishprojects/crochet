plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'com.gradleup.shadow'
    id 'dev.lukebemish.managedversioning'
}

group = 'dev.lukebemish.crochet'

managedVersioning {
    versionFile.set project.file('../version.properties')
    gitWorkingDir.set project.file('../')
    versionPRs()
    versionSnapshots()

    apply()
}

repositories {
    if (project.useLocalMavenForTesting) {
        mavenLocal()
    }

    mavenCentral()
    maven {
        url = 'https://maven.fabricmc.net/'
    }
}

var versions = new Properties()
file("../src/main/resources/versions.properties").withInputStream {
    versions.load(it)
}

dependencies {
    implementation 'net.fabricmc:tiny-remapper:0.9.0'
    implementation 'info.picocli:picocli:4.7.6'
    implementation 'net.neoforged:srgutils:1.0.9'
    implementation 'net.fabricmc:access-widener:2.1.0'
    implementation 'com.google.code.gson:gson:2.11.0'
    annotationProcessor 'info.picocli:picocli-codegen:4.7.6'

    implementation("dev.lukebemish:taskgraphrunner:${versions.taskgraphrunner}") {
        capabilities {
            requireCapability("dev.lukebemish:taskgraphrunner-signatures")
        }
    }

    // TODO: conventions
    compileOnly cLibs.bundles.compileonly
    annotationProcessor cLibs.bundles.annotationprocessor
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    dirPermissions {
        it.unix 0755
    }
    filePermissions {
        it.unix 0644
    }
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

jar {
    manifest {
        attributes([
            // These do _not_ contain an implementation version, to avoid needless cache invalidation
            'Main-Class' : 'dev.lukebemish.crochet.tools.Main'
        ])
    }
    archiveClassifier.set('slim')
}

shadowJar {
    manifest {
        attributes([
            // These do _not_ contain an implementation version, to avoid needless cache invalidation
            'Main-Class' : 'dev.lukebemish.crochet.tools.Main'
        ])
    }
    archiveClassifier.set('')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            managedVersioning.publishing.pom(it, 'Crochet', 'LGPL-3.0-or-later')
            pom {
                name = 'Crochet - Tools'
                description = 'Various tools invoked by crochet at runtime.'
            }

            from components.java
        }
    }
}

tasks.register('publishCentral') {
    dependsOn('publish')
}

managedVersioning.publishing.sign(signing, publishing)
managedVersioning.publishing.mavenStaging(publishing)
managedVersioning.publishing.mavenPullRequest(publishing)
managedVersioning.publishing.mavenSnapshot(publishing)

